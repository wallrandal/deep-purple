{"version":3,"sources":["Sectors.js","Description.js","App.js","serviceWorker.js","index.js"],"names":["Sectors","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","responsive","0","items","600","1024","inherits","createClass","key","value","state","galleryItems","sectors","map","i","react_default","a","createElement","className","name","react_alice_carousel_default","buttonsDisabled","fadeOutAnimation","mouseDragEnabled","disableAutoPlayOnAction","onSlideChange","onSlideChanged","e","console","debug","item","slide","Component","Description","handleClick","bind","assertThisInitialized","document","getElementById","scrollIntoView","behavior","onClick","local","date","time","id","Sectors_Sectors","App","_this2","fetch","then","response","json","data","setState","logo","main_picture","band_name","catch","error","isLoading","fetchData","_this$state","src","Description_Description","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.80ff0b38.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport AliceCarousel from 'react-alice-carousel'\nimport 'react-alice-carousel/lib/alice-carousel.css'\nimport './Sectors.scss';\n\nexport class Sectors extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n  \tconst state = {\n\tgalleryItems: this.props.sectors.map((i) => (\n\t\t<div className=\"Sector\">\n\t\t\t<div>{i.name}</div>\n\t\t\t<div>{i.value}</div>\n\t\t\t<div>Quantidade: </div>\n\t\t</div>\n\t\t)),\n\t}\n    return (\n      \t <AliceCarousel\n\t        items={state.galleryItems}\n\t        responsive={this.responsive}\n\t        buttonsDisabled={true}\n\t        fadeOutAnimation={true}\n\t        mouseDragEnabled={true}\n\t        disableAutoPlayOnAction={true}\n\t        onSlideChange={this.onSlideChange}\n\t        onSlideChanged={this.onSlideChanged}\n\t      />\n    );\n  }\n\n  responsive = {\n    0: { items: 1 },\n    600: { items: 2 },\n    1024: { items: 3 },\n  }\n\n  onSlideChange(e) {\n    console.debug('Item`s position during a change: ', e.item)\n    console.debug('Slide`s position during a change: ', e.slide)\n  }\n\n  onSlideChanged(e) {\n    console.debug('Item`s position after changes: ', e.item)\n    console.debug('Slide`s position after changes: ', e.slide)\n  }\n}\n","import React, { Component } from 'react';\nimport './Description.scss';\nimport { Sectors} from './Sectors';\nexport class Description extends Component {\n\tconstructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    document.getElementById('sectors').scrollIntoView({ \n\t\t  behavior: 'smooth' \n\t\t});\n  }\n\n  render() {\n    return (\n      <div className=\"Description\">\n      \t<div className=\"Description__button\">\n      \t\t<a onClick={this.handleClick} >Compre Agora! </a>\n      \t</div>\n      \t<div className=\"Description__local\">\n      \t\t<div className=\"Description__local_name\">{this.props.local}</div>\n      \t\t<div className=\"Description__local_date\">{this.props.date}</div>\n      \t\t<div className=\"Description__local_time\">{this.props.time}</div>\n      \t</div>\n\n      \t<div className=\"Description__sectors\" id=\"sectors\">\n           <Sectors sectors={this.props.sectors} />\n      \t</div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { Description } from './Description';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sectors: []\n    }\n  }\n\n  fetchData() {\n    fetch(`./Band1.json`)\n      .then(response => response.json())\n      .then(data =>\n        this.setState({\n          logo: data.logo,\n          main_picture: data.main_picture,\n          band_name: data.band_name,\n          local: data.local,\n          date: data.date,\n          time: data.time,\n          sectors: data.sectors\n        })\n      )\n      .catch(error => this.setState({ error, isLoading: false }));\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  render() {\n    const {logo, main_picture, band_name, local, date, time, sectors} = this.state;\n    return (\n      <div className=\"App\"> \n        <div className=\"App__background\" >\n          <div className=\"App__background__content\" >\n            <div className=\"App__background__content__title\">\n                <img src={logo} />\n            </div>\n            <div className=\"App__background__content__header\" >\n              <img src={main_picture} />\n            </div>\n            <Description local={local} date={date} time={time} sectors={sectors} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}